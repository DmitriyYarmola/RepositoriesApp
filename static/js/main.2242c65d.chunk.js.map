{"version":3,"sources":["Components/UI/Img/Erorrs/error.svg","Components/UI/Img/User/user.svg","serviceWorker.ts","Components/API/api.ts","Components/Features/Errors/Model/selectors.ts","Components/Features/Errors/Model/actions.ts","Components/Features/Errors/Model/types.ts","Components/Features/Errors/Model/reducer.ts","Components/Features/Errors/error.tsx","Components/Features/RepositoriesTable/Model/actions.ts","Components/Features/RepositoriesTable/Model/types.ts","Components/Features/RepositoriesTable/Model/thunks.ts","Components/Features/RepositoriesTable/Model/selectors.ts","Components/Features/RepositoriesTable/Model/reducer.ts","Components/UI/Atoms/Input.tsx","Components/UI/Atoms/Criterions.tsx","Components/UI/Atoms/BlockWrapped.tsx","Components/UI/Atoms/RepositoryInfo/Contributors.tsx","Components/UI/Atoms/RepositoryInfo/Description.tsx","Components/UI/Atoms/RepositoryInfo/Info.tsx","Components/UI/Atoms/Link.tsx","Components/UI/Atoms/RepositoryInfo/OwnerInfo.tsx","Components/UI/Atoms/RepositoryInfo/UsedLanguage.tsx","Components/UI/Atoms/CardTitle.tsx","Components/UI/Atoms/Button.tsx","Components/Features/RepositoriesTable/Atoms/repository.tsx","Components/Features/RepositoriesTable/Molecules/repositories.tsx","Components/Features/RepositoriesTable/Organisms/Table.tsx","Components/Features/Paginator/paginator.tsx","Components/Features/Paginator/Model/selectors.ts","Components/Features/Paginator/Model/actions.ts","Components/Features/Paginator/Model/types.ts","Components/Features/Paginator/Model/reducer.ts","Components/lib/store/root-reducer.ts","Components/lib/store/store.ts","Components/UI/Molecules/Preloader/Preloader.tsx","Components/Pages/Main/index.tsx","Components/UI/Molecules/RepositoryCard/RepositoryCard.tsx","Components/Pages/Card/index.tsx","App.tsx","index.tsx"],"names":["module","exports","Boolean","window","location","hostname","match","ResponseCode","instance","axios","create","baseURL","headers","RepositoriesAPI","getRepositories","a","get","params","q","sort","order","page","per_page","response","console","log","searchRepositories","name","pageNumber","getContributorsOfRepository","fullNameOfRepository","error","state","ErrorsReducer","textErorr","textError","Actions","payload","type","initialState","opacity","keyframes","ErrorItem","styled","div","Img","img","Content","ImgWrapped","Error","useSelector","ErrorsSelectors","dispatch","useDispatch","setTimeout","ErrorsActions","src","ErrorImg","status","OK","data","items","searchRepository","numberPage","total_count","getContributesRepository","fullName","repositories","RepositoriesReducer","totalCount","contributors","contributorsOfActiveRepository","activeRepositoryId","infoAboutActiveRepository","createSelector","filter","repositoriy","id","TextField","input","Input","plHolder","onChange","value","onKeyPress","placeholder","Header","Name","Span","span","CountStars","DateLastCommit","LinkGitHub","Criterions","Wrapped","BlockWrapped","children","Contributor","Contributors","activeContibutes","contributorsArray","forEach","contribute","push","login","length","join","DescriptionItem","Description","description","Repository","RepositoryName","RepositoryStars","RepositoryDateLastCommit","Info","repoName","countStars","dateLastCommit","Link","href","target","className","Owner","WrappedImg","OwnerAvatar","OwnerNickName","OwnerInfo","avatar","nickName","link","AvatarImg","Languages","UsedLanguage","language","Title","CardTitle","title","ButtonS","button","Button","onClick","RepositoryItem","LinkOnGithub","countOfStars","linkOnGithub","repoID","onGetInfoOfRepository","useCallback","RepositoriesActions","RepositoriesThunks","to","style","textTransform","textDecoration","color","RepositoriesList","Repositories","repositoriesItems","map","repository","key","stargazers_count","updated_at","html_url","full_name","RepositoriesTable","Table","PageNumber","NumberList","Paginator","totalItemsCount","pageSize","currentPage","onSetCurrentPage","portionSize","pagesCount","Math","ceil","pages","i","portionCount","useState","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","p","e","PaginatorReducer","rootReducer","combineReducers","action","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","Thanka","Preloader","MainPage","setValue","RepositoriesSelectors","PaginatorSelectors","useEffect","localStorage","setItem","JSON","stringify","getCurrentPage","getItem","PaginatorActions","parse","getValueInput","onSearchRepository","currentTarget","onSendNameOfRepository","Card","RepositoryCard","activeContributes","CardPage","repositoryInfo","getContributors","getActiveRepositoryId","owner","avatar_url","Wrapper","App","path","exact","component","ReactDOM","render","document","querySelector","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.2242c65d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/error.6d1bac02.svg\";","module.exports = __webpack_public_path__ + \"static/media/user.051edb19.svg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { RepositoryType } from './global-types';\r\n/* eslint-disable @typescript-eslint/camelcase */\r\nimport axios from 'axios'\r\n\r\n\r\ninterface DataResponseType {\r\n    items: RepositoryType[]\r\n    total_count: number\r\n    incomplete_results: boolean\r\n}\r\n\r\nexport enum ResponseCode {\r\n    OK = 200,\r\n    NoFound = 404,\r\n}\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://api.github.com',\r\n    headers: {\r\n        'Content-Type': 'application/x-www-form-urlencoded',\r\n    },\r\n})\r\nexport const RepositoriesAPI = {\r\n    getRepositories: async () => {\r\n        try {\r\n            const response = await instance.get<DataResponseType>('search/repositories', {\r\n                params: {\r\n                    q: 'stars',\r\n                    sort: 'stars',\r\n                    order: 'desc',\r\n                    page: 1,\r\n                    per_page: 10,\r\n                },\r\n            })\r\n            console.log(response)\r\n            return response\r\n        } catch (error) {\r\n            return error\r\n        }\r\n    },\r\n    searchRepositories: async (name: string, pageNumber: number) => {\r\n        try {\r\n            const response = await instance.get<DataResponseType>(\r\n                `search/repositories?q=${name}+in:name`,\r\n                {\r\n                    params: {\r\n                        sort: 'stars',\r\n                        page: pageNumber,\r\n                        per_page: 10,\r\n                    },\r\n                }\r\n            )\r\n            return response\r\n        } catch (error) {\r\n            return error\r\n        }\r\n    },\r\n    getContributorsOfRepository: async (fullNameOfRepository: string) => {\r\n        try {\r\n            const response = await instance.get(\r\n                `repos/${fullNameOfRepository}/contributors`,\r\n                {\r\n                    params: {\r\n                        per_page: 10,\r\n                    },\r\n                }\r\n            )\r\n            return response\r\n        } catch (error) {\r\n            return error\r\n        }\r\n    },\r\n}\r\n","import { AppStateType } from '../../../lib/store'\r\n\r\nexport const error = (state: AppStateType): boolean => state.ErrorsReducer.error\r\nexport const textErorr = (state: AppStateType): string => state.ErrorsReducer.textError\r\n","import { InferActionsType } from '../../../lib/store'\r\nimport * as types from './types'\r\n\r\ninterface SetErrorPayloadType {\r\n    error: boolean\r\n    textError: string\r\n}\r\nexport const Actions = {\r\n    setError: (payload: SetErrorPayloadType) =>\r\n        ({\r\n            type: types.SET_ERROR,\r\n            payload,\r\n        } as const),\r\n}\r\n\r\nexport type ActionsType = InferActionsType<typeof Actions>\r\n","export const SET_ERROR = 'SET_ERROR'\r\n","import { ActionsType } from './actions'\r\nimport * as types from './types'\r\n\r\nconst initialState = {\r\n    error: false as boolean,\r\n    textError: '' as string,\r\n}\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const Reducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case types.SET_ERROR:\r\n            return {\r\n                ...state,\r\n                error: action.payload.error,\r\n                textError: action.payload.textError,\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","import React from 'react'\r\nimport styled, { keyframes } from 'styled-components'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport ErrorImg from '../../UI/Img/Erorrs/error.svg'\r\nimport { ErrorsSelectors, ErrorsActions } from './Model'\r\n\r\nconst opacity = keyframes`\r\n    0% {\r\n        opacity: 0;\r\n    }\r\n    5% {\r\n        opacity: .5\r\n    }\r\n    10% {\r\n        opacity: 1;\r\n    }\r\n    30% {\r\n        opacity: 1;\r\n    }\r\n    50% {\r\n        opacity: 1;\r\n    }\r\n    70% {\r\n        opacity: 1;\r\n    }\r\n    90% {\r\n        opacity: 1;\r\n    }\r\n    95% {\r\n        opacity: .5;\r\n    }\r\n    100% {\r\n        opacity: 0;\r\n    }\r\n`\r\nconst ErrorItem = styled.div`\r\n    position: absolute;\r\n    left: 50%;\r\n    top: 0;\r\n    transform: translate(-50%, 0);\r\n    width: auto;\r\n    height: 50px;\r\n    background: white;\r\n    color: black;\r\n    border: 1px solid black;\r\n    display: grid;  \r\n    grid-template-columns: max-content max-content;\r\n    text-align: center;\r\n    justify-content: center;\r\n    align-items: center;\r\n    padding: 0 15px;\r\n    animation: ${opacity} 8s linear;\r\n`\r\n\r\nconst Img = styled.img`\r\n    width: 20px;\r\n    height: 20px;\r\n`\r\nconst Content = styled.div`\r\n    margin-left: 10px;\r\n`\r\nconst ImgWrapped = styled.div``\r\n\r\nexport const Error = (): React.ReactElement => {\r\n    const textError = useSelector(ErrorsSelectors.textErorr)\r\n    const dispatch = useDispatch()\r\n    setTimeout(() => {\r\n        dispatch(ErrorsActions.setError({ error: false, textError: '' }))\r\n    }, 8000)\r\n    return (\r\n        <ErrorItem>\r\n            <ImgWrapped>\r\n                <Img src={ErrorImg} />\r\n            </ImgWrapped>\r\n            <Content>{textError}</Content>\r\n        </ErrorItem>\r\n    )\r\n}\r\n","import { InferActionsType } from '../../../lib/store'\r\nimport { RepositoryType, UserType } from '../../../API'\r\n\r\nimport * as types from './types'\r\n\r\nexport const Actions = {\r\n    setRepositories: (payload: RepositoryType[]) =>\r\n        ({\r\n            type: types.SET_REPOSITORIES,\r\n            payload,\r\n        } as const),\r\n    setTotalCountOfRepositories: (payload: number) =>\r\n        ({\r\n            type: types.SET_TOTAL_COUNT_REPOSITORIES,\r\n            payload,\r\n        } as const),\r\n    setContributesOfActiveRepository: (payload: UserType[]) =>\r\n        ({\r\n            type: types.SET_CONTRIBUTES_OF_ACTIVE_REPOSITORY,\r\n            payload,\r\n        } as const),\r\n    setActiveRepository: (payload: number) =>\r\n        ({\r\n            type: types.SET_ACTIVE_REPOSITORY,\r\n            payload,\r\n        } as const),\r\n}\r\n\r\nexport type ActionsType = InferActionsType<typeof Actions>\r\n","export const SET_REPOSITORIES = 'GET_REPOSITORIES'\r\nexport const SET_REPOSITORIES_THROUGH_SEARCH = 'GET_REPOSITORIES_THROUGH_SEARCH'\r\nexport const SET_TOTAL_COUNT_REPOSITORIES = 'GET_TOTAL_COUNT_REPOSITORIES'\r\nexport const SET_ACTIVE_REPOSITORY = 'SET_ACTIVE_REPOSITORY'\r\nexport const SET_CONTRIBUTES_OF_ACTIVE_REPOSITORY = 'GET_CONTRIBUTES_OF_ACTIVE_REPOSITORY'\r\n","import { ThunkAction } from 'redux-thunk'\r\nimport { RepositoriesAPI, ResponseCode } from '../../../API'\r\nimport { AppStateType } from '../../../lib/store'\r\n\r\nimport { ErrorsActions, ErrorsActionsType } from '../../Errors'\r\nimport { Actions, ActionsType } from './actions'\r\n\r\ntype ThunkType = ThunkAction<\r\n    Promise<void>,\r\n    AppStateType,\r\n    unknown,\r\n    ActionsType | ErrorsActionsType\r\n>\r\n\r\nexport const getRepositories = (): ThunkType => {\r\n    return async (dispatch) => {\r\n        const response = await RepositoriesAPI.getRepositories()\r\n        if (response.status === ResponseCode.OK)\r\n            dispatch(Actions.setRepositories(response.data.items))\r\n        else\r\n            dispatch(\r\n                ErrorsActions.setError({\r\n                    error: true,\r\n                    textError: 'Please, refresh the page.',\r\n                })\r\n            )\r\n    }\r\n}\r\n\r\nexport const searchRepository = (name: string, numberPage: number): ThunkType => {\r\n    return async (dispatch) => {\r\n        const response = await RepositoriesAPI.searchRepositories(name, numberPage)\r\n\r\n        if (response.status === ResponseCode.OK) {\r\n            dispatch(Actions.setRepositories(response.data.items))\r\n            dispatch(Actions.setTotalCountOfRepositories(response.data.total_count))\r\n        } else\r\n            dispatch(\r\n                ErrorsActions.setError({\r\n                    error: true,\r\n                    textError: 'Please, refresh the page.',\r\n                })\r\n            )\r\n    }\r\n}\r\n\r\nexport const getContributesRepository = (fullName: string): ThunkType => {\r\n    return async (dispatch) => {\r\n        const response = await RepositoriesAPI.getContributorsOfRepository(fullName)\r\n        console.log(response)\r\n        if (response.status === ResponseCode.OK) {\r\n            dispatch(Actions.setContributesOfActiveRepository(response.data))\r\n        } else\r\n            dispatch(\r\n                ErrorsActions.setError({\r\n                    error: true,\r\n                    textError: 'Happend error. Refresh the page.',\r\n                })\r\n            )\r\n    }\r\n}\r\n","import { createSelector } from 'reselect'\r\nimport { AppStateType } from '../../../lib/store'\r\nimport { RepositoryType, UserType } from '../../../API'\r\n\r\nexport const repositories = (state: AppStateType): RepositoryType[] | null =>\r\n    state.RepositoriesReducer.repositories\r\n\r\nexport const totalCount = (state: AppStateType): number =>\r\n    state.RepositoriesReducer.totalCount\r\n\r\nexport const contributors = (state: AppStateType): UserType[] | null =>\r\n    state.RepositoriesReducer.contributorsOfActiveRepository\r\n\r\nexport const activeRepositoryId = (state: AppStateType): number | null =>\r\n    state.RepositoriesReducer.activeRepositoryId\r\n\r\nexport const infoAboutActiveRepository = createSelector(\r\n    [activeRepositoryId, repositories],\r\n    (activeRepositoryId, repositories) =>\r\n        repositories?.filter((repositoriy) => repositoriy.id === activeRepositoryId)\r\n)\r\n","import { RepositoryType, UserType } from '../../../API'\r\nimport * as types from './types'\r\nimport { ActionsType } from './actions'\r\n\r\nconst initialState = {\r\n    repositories: null as RepositoryType[] | null,\r\n    totalCount: 10,\r\n    contributorsOfActiveRepository: null as UserType[] | null,\r\n    activeRepositoryId: null as number | null,\r\n}\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const Reducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case types.SET_REPOSITORIES:\r\n            return {\r\n                ...state,\r\n                repositories: action.payload,\r\n            }\r\n        case types.SET_TOTAL_COUNT_REPOSITORIES:\r\n            return {\r\n                ...state,\r\n                totalCount: action.payload,\r\n            }\r\n        case types.SET_ACTIVE_REPOSITORY:\r\n            return {\r\n                ...state,\r\n                activeRepositoryId: action.payload,\r\n            }\r\n        case types.SET_CONTRIBUTES_OF_ACTIVE_REPOSITORY:\r\n            return {\r\n                ...state,\r\n                contributorsOfActiveRepository: action.payload,\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nconst TextField = styled.input`\r\n    border: 1px solid black;\r\n    background: white;\r\n    margin: 0;\r\n    padding: 10px;\r\n    width: 290px;\r\n`\r\n\r\ninterface InputPropsType {\r\n    type: string\r\n    plHolder: string\r\n    onChange: (e: React.ChangeEvent<HTMLInputElement>) => void\r\n    onKeyPress: (e: React.KeyboardEvent) => void\r\n    value: string\r\n}\r\nexport const Input: React.FC<InputPropsType> = ({\r\n    type,\r\n    plHolder,\r\n    onChange,\r\n    value,\r\n    onKeyPress,\r\n}) => {\r\n    return (\r\n        <TextField\r\n            type={type}\r\n            placeholder={plHolder}\r\n            onChange={onChange}\r\n            value={value}\r\n            onKeyPress={onKeyPress}\r\n        />\r\n    )\r\n}\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nconst Header = styled.div`\r\n    display: grid;\r\n    grid-template-columns: 1fr 1fr 1fr 1fr;\r\n    font-weight: bold;\r\n    background: #f2f3f4;\r\n    color: black;\r\n    padding: 0 10px;\r\n    margin-top: 15px;\r\n    text-align: center;\r\n    border: 1px solid black;\r\n    border-top-left-radius: 10px;\r\n    border-top-right-radius: 10px;\r\n`\r\nconst Name = styled.div``\r\nconst Span = styled.span`\r\n    padding: 10px;\r\n    display: block;\r\n`\r\nconst CountStars = styled.div`\r\n    border-right: 1px solid black;\r\n    border-left: 1px solid black;\r\n`\r\nconst DateLastCommit = styled.div`\r\n    border-right: 1px solid black;\r\n`\r\n\r\nconst LinkGitHub = styled.div``\r\nexport const Criterions = () => {\r\n    return (\r\n        <Header>\r\n            <Name>\r\n                <Span>Name</Span>\r\n            </Name>\r\n            <CountStars>\r\n                <Span>Stars Count</Span>\r\n            </CountStars>\r\n            <DateLastCommit>\r\n                <Span>Date last Commit</Span>\r\n            </DateLastCommit>\r\n            <LinkGitHub>\r\n                <Span>Link on Github</Span>\r\n            </LinkGitHub>\r\n        </Header>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nconst Wrapped = styled.div`\r\n    text-align: center;\r\n`\r\ninterface PaginatorWrappedProps {\r\n    children: React.ReactNode\r\n}\r\nexport const BlockWrapped: React.FC<PaginatorWrappedProps> = ({ children }) => (\r\n    <Wrapped>{children}</Wrapped>\r\n)\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { UserType } from '../../../API'\r\n\r\nconst Contributor = styled.div``\r\nconst Span = styled.span`\r\n    font-weight: 800;\r\n    font-size: 16px;\r\n`\r\ninterface ActiveContributesPropsType {\r\n    activeContibutes: UserType[]\r\n}\r\nexport const Contributors: React.FC<ActiveContributesPropsType> = ({\r\n    activeContibutes,\r\n}) => {\r\n    const contributorsArray: string[] = []\r\n    activeContibutes.forEach((contribute) => contributorsArray.push(contribute.login))\r\n\r\n    return (\r\n        <Contributor>\r\n            <Span>Active Contributors: </Span>\r\n            {contributorsArray.length > 0\r\n                ? contributorsArray.join(', ')\r\n                : 'This repository haven`t contributors'}\r\n        </Contributor>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nconst DescriptionItem = styled.div``\r\nconst Span = styled.span`\r\n    font-weight: 800;\r\n    font-size: 16px;\r\n`\r\ninterface DescriptionRepositoryPropsType {\r\n    description: string\r\n}\r\nexport const Description: React.FC<DescriptionRepositoryPropsType> = ({\r\n    description,\r\n}) => {\r\n    return (\r\n        <DescriptionItem>\r\n            <Span>Description: </Span>\r\n            {description}\r\n        </DescriptionItem>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nconst Repository = styled.div`\r\n    display: grid;\r\n`\r\nconst Span = styled.span`\r\n    font-weight: 800;\r\n    font-size: 16px;\r\n`\r\nconst RepositoryName = styled.div``\r\nconst RepositoryStars = styled.div``\r\nconst RepositoryDateLastCommit = styled.div``\r\n\r\ninterface RepositoryInfoPropsType {\r\n    repoName: string\r\n    countStars: number\r\n    dateLastCommit: string\r\n}\r\nexport const Info: React.FC<RepositoryInfoPropsType> = ({\r\n    repoName,\r\n    countStars,\r\n    dateLastCommit,\r\n}) => {\r\n    return (\r\n        <Repository>\r\n            <RepositoryName>\r\n                <Span>Name:</Span> {repoName}\r\n            </RepositoryName>\r\n            <RepositoryStars>\r\n                <Span>Stars:</Span> {countStars}\r\n            </RepositoryStars>\r\n            <RepositoryDateLastCommit>\r\n                <Span>Update:</Span> {dateLastCommit}\r\n            </RepositoryDateLastCommit>\r\n        </Repository>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\ninterface LinkPropsType {\r\n    children: React.ReactNode\r\n    href: string\r\n    target: string\r\n    className?: string\r\n}\r\nexport const Link: React.FC<LinkPropsType> = ({ children, href, target, className }) => {\r\n    return (\r\n        <a href={href} target={target} className={className}>\r\n            {children}\r\n        </a>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport AvatarImg from '../../Img/User/user.svg'\r\nimport { Link } from '../Link'\r\n\r\nconst Owner = styled.div`\r\n    display: grid;\r\n    grid-template-columns: max-content max-content max-content;\r\n    align-items: center;\r\n`\r\nconst WrappedImg = styled.div``\r\nconst OwnerAvatar = styled.img`\r\n    border-radius: 10px;\r\n    width: 40px;\r\n    height: 40px;\r\n`\r\nconst OwnerNickName = styled(Link)`\r\n    display: block;\r\n    text-transform: none;\r\n    text-decoration: none;\r\n    margin-left: 10px;\r\n    color: inherit;\r\n`\r\nconst Span = styled.span`\r\n    font-weight: 800;\r\n    font-size: 16px;\r\n    margin-right: 5px;\r\n`\r\ninterface OwnerInfoPropsType {\r\n    avatar: string\r\n    nickName: string\r\n    link: string\r\n}\r\nexport const OwnerInfo: React.FC<OwnerInfoPropsType> = ({ avatar, nickName, link }) => {\r\n    return (\r\n        <Owner>\r\n            <Span>Owner: </Span>\r\n            <WrappedImg>\r\n                <OwnerAvatar src={avatar ? avatar : AvatarImg} />\r\n            </WrappedImg>\r\n            <OwnerNickName href={link} target=\"_blank\">\r\n                {nickName}\r\n            </OwnerNickName>\r\n        </Owner>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nconst Languages = styled.div``\r\nconst Span = styled.span`\r\n    font-weight: 800;\r\n    font-size: 16px;\r\n`\r\ninterface ListUsedLanguagePropsType {\r\n    language: string | null | string[]\r\n}\r\nexport const UsedLanguage: React.FC<ListUsedLanguagePropsType> = ({ language }) => {\r\n    return (\r\n        <Languages>\r\n            <Span>Language: </Span>\r\n            {language ? language : 'Language isn`t use'}\r\n        </Languages>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nconst Title = styled.div`\r\n    text-align: center;\r\n    font-weight: 800;\r\n    font-size: 20px;\r\n`\r\n\r\ninterface CardTitlePropsType {\r\n    title: string\r\n}\r\nexport const CardTitle: React.FC<CardTitlePropsType> = ({ title }) => {\r\n    return <Title>{title}</Title>\r\n}\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nconst ButtonS = styled.button`\r\n    background: none;\r\n    padding: 0 5px;\r\n    margin: 0;\r\n    border: 0;\r\n    outline: none;\r\n    color: black;\r\n`\r\n\r\ninterface ButtonPropsType {\r\n    children: React.ReactNode\r\n    onClick: () => void\r\n}\r\n\r\nexport const Button: React.FC<ButtonPropsType> = ({ children, onClick }) => {\r\n    return <ButtonS onClick={onClick}>{children}</ButtonS>\r\n}\r\n","import React, { useCallback } from 'react'\r\nimport styled from 'styled-components'\r\nimport { NavLink } from 'react-router-dom'\r\nimport { useDispatch } from 'react-redux'\r\nimport { RepositoriesActions, RepositoriesThunks } from '../Model'\r\nimport { Link } from '../../../UI/Atoms'\r\n\r\nconst RepositoryItem = styled.div`\r\n    display: grid;\r\n    grid-template-columns: 1fr 1fr 1fr 1fr;\r\n    background: #f2f3f4;\r\n    color: black;\r\n    padding: 10px 10px;\r\n    text-align: center;\r\n    &:hover {\r\n        background: white;\r\n    }\r\n    border-right: 1px solid black;\r\n    border-left: 1px solid black;\r\n    border: 1px solid black;\r\n`\r\n\r\nconst Name = styled.div`\r\n    cursor: pointer;\r\n    text-transform: none;\r\n`\r\nconst CountStars = styled.span`\r\n    border-right: 1px solid black;\r\n    border-left: 1px solid black;\r\n`\r\nconst DateLastCommit = styled.span`\r\n    border-right: 1px solid black;\r\n`\r\nconst LinkOnGithub = styled(Link)`\r\n    text-transform: none;\r\n    text-decoration: none;\r\n    margin-left: 10px;\r\n    color: inherit;\r\n`\r\n\r\ninterface RepositoriesPropsType {\r\n    name: string\r\n    countOfStars: number\r\n    dateLastCommit: string\r\n    linkOnGithub: string\r\n    repoID: number\r\n    fullName: string\r\n}\r\n\r\nexport const Repository: React.FC<RepositoriesPropsType> = ({\r\n    name,\r\n    countOfStars,\r\n    dateLastCommit,\r\n    linkOnGithub,\r\n    repoID,\r\n    fullName,\r\n}) => {\r\n    const dispatch = useDispatch()\r\n    const onGetInfoOfRepository = useCallback(() => {\r\n        dispatch(RepositoriesActions.setActiveRepository(repoID))\r\n        dispatch(RepositoriesThunks.getContributesRepository(fullName))\r\n    }, [dispatch, repoID, fullName])\r\n\r\n    return (\r\n        <RepositoryItem>\r\n            <Name>\r\n                <NavLink\r\n                    onClick={onGetInfoOfRepository}\r\n                    to={'/' + repoID}\r\n                    style={{\r\n                        textTransform: 'none',\r\n                        textDecoration: 'none',\r\n                        color: 'black',\r\n                    }}\r\n                >\r\n                    {name}\r\n                </NavLink>\r\n            </Name>\r\n            <CountStars>{countOfStars}</CountStars>\r\n            <DateLastCommit>{dateLastCommit}</DateLastCommit>\r\n            <LinkOnGithub href={linkOnGithub} target=\"_blank\">\r\n                {' '}\r\n                Link\r\n            </LinkOnGithub>\r\n        </RepositoryItem>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Repository } from '../Atoms'\r\nimport { RepositoryType } from '../../../API'\r\n\r\nconst RepositoriesList = styled.div``\r\ninterface RepositoriesPropsType {\r\n    repositories: RepositoryType[]\r\n}\r\nexport const Repositories: React.FC<RepositoriesPropsType> = ({ repositories }) => {\r\n    const repositoriesItems = repositories.map((repository) => {\r\n        return (\r\n            <Repository\r\n                key={repository.id}\r\n                name={repository.name}\r\n                countOfStars={repository.stargazers_count}\r\n                dateLastCommit={repository.updated_at}\r\n                linkOnGithub={repository.html_url}\r\n                repoID={repository.id}\r\n                fullName={repository.full_name}\r\n            />\r\n        )\r\n    })\r\n    return <RepositoriesList>{repositoriesItems}</RepositoriesList>\r\n}\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Criterions } from '../../../UI/Atoms'\r\nimport { Repositories } from '../Molecules'\r\nimport { RepositoryType } from '../../../API'\r\n\r\nconst RepositoriesTable = styled.div``\r\n\r\ninterface RepositoriesTablePropsType {\r\n    repositories: RepositoryType[]\r\n}\r\nexport const Table: React.FC<RepositoriesTablePropsType> = ({ repositories }) => {\r\n    return (\r\n        <RepositoriesTable>\r\n            <Criterions />\r\n            <Repositories repositories={repositories} />\r\n        </RepositoriesTable>\r\n    )\r\n}\r\n","import React, { useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport './style.sass'\r\nimport { Button } from '../../UI/Atoms'\r\n\r\nconst PageNumber = styled.span`\r\n    color: black;\r\n    padding: 8px 16px;\r\n    text-decoration: none;\r\n    transition: background-color 0.3s;\r\n    border: 1px solid #ddd;\r\n    cursor: pointer;\r\n    &:hover:not(.selectedPage) {\r\n        background: #f2f2f2;\r\n    }\r\n`\r\nconst NumberList = styled.div`\r\n    display: inline-block;\r\n    margin-top: 10px;\r\n`\r\n\r\nexport interface PropsType {\r\n    totalItemsCount: number\r\n    pageSize: number\r\n    currentPage: number | null\r\n    onSetCurrentPage: (pageNumber: number) => void\r\n    portionSize: number\r\n}\r\n\r\nexport const Paginator: React.FC<PropsType> = ({\r\n    totalItemsCount,\r\n    pageSize,\r\n    currentPage,\r\n    onSetCurrentPage,\r\n    portionSize,\r\n}) => {\r\n    const pagesCount = Math.ceil(totalItemsCount / pageSize)\r\n    console.log(pagesCount)\r\n    const pages: number[] = []\r\n\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        if (i <= 10) pages.push(i)\r\n    }\r\n\r\n    console.log(pages)\r\n    const portionCount = Math.ceil(pagesCount < 10 ? pagesCount : 10 / portionSize)\r\n    const [portionNumber, setPortionNumber] = useState(1)\r\n\r\n    const leftPortionPageNumber = (portionNumber - 1) * portionSize + 1\r\n    const rightPortionPageNumber = portionNumber * portionSize\r\n\r\n    return (\r\n        <NumberList>\r\n            {portionNumber > 1 && (\r\n                <>\r\n                    <Button\r\n                        onClick={() => {\r\n                            setPortionNumber(1)\r\n                        }}\r\n                    >\r\n                        ««\r\n                    </Button>\r\n                    <Button\r\n                        onClick={() => {\r\n                            setPortionNumber(1)\r\n                            setPortionNumber(portionNumber - 1)\r\n                        }}\r\n                    >\r\n                        «\r\n                    </Button>\r\n                </>\r\n            )}\r\n            {pages\r\n                .filter((p) => p >= leftPortionPageNumber && p <= rightPortionPageNumber)\r\n                .map((p) => {\r\n                    return (\r\n                        <PageNumber\r\n                            key={p}\r\n                            className={`${currentPage === p ? 'selectedPage' : ''}`}\r\n                            onClick={(e) => {\r\n                                onSetCurrentPage(p)\r\n                            }}\r\n                        >\r\n                            {p}\r\n                        </PageNumber>\r\n                    )\r\n                })}\r\n            {portionNumber < portionCount && (\r\n                <>\r\n                    <Button\r\n                        onClick={() => {\r\n                            setPortionNumber(portionNumber + 1)\r\n                        }}\r\n                    >\r\n                        »\r\n                    </Button>\r\n                    <Button\r\n                        onClick={() => {\r\n                            setPortionNumber(portionCount)\r\n                        }}\r\n                    >\r\n                        »»\r\n                    </Button>\r\n                </>\r\n            )}\r\n            {}\r\n        </NumberList>\r\n    )\r\n}\r\n","import { AppStateType } from '../../../lib/store/index'\r\n\r\nexport const pageSize = (state: AppStateType): number => state.PaginatorReducer.pageSize\r\n\r\nexport const portionSize = (state: AppStateType): number =>\r\n    state.PaginatorReducer.portionSize\r\n\r\nexport const currentPage = (state: AppStateType): number | null =>\r\n    state.PaginatorReducer.currentPage\r\n","import { InferActionsType } from '../../../lib/store/store'\r\nimport * as types from './types'\r\n\r\nexport const Actions = {\r\n    setCurrentPage: (payload: number) =>\r\n        ({\r\n            type: types.SET_CURRENT_PAGE,\r\n            payload,\r\n        } as const),\r\n}\r\n\r\nexport type ActionsType = InferActionsType<typeof Actions>\r\n","export const SET_CURRENT_PAGE = 'SET_CURRENT_PAGE'\r\n","import * as types from './types'\r\nimport { ActionsType } from './actions'\r\n\r\nconst initialState = {\r\n    pageSize: 10,\r\n    portionSize: 3,\r\n    currentPage: null as number | null,\r\n}\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const Reducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case types.SET_CURRENT_PAGE:\r\n            return {\r\n                ...state,\r\n                currentPage: action.payload,\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","import { combineReducers } from 'redux'\r\nimport { RepositoriesReducer } from '../../Features/RepositoriesTable'\r\nimport { PaginatorReducer } from '../../Features/Paginator'\r\nimport { ErrorsReducer } from '../../Features/Errors'\r\n\r\nexport const rootReducer = combineReducers({\r\n    RepositoriesReducer,\r\n    PaginatorReducer,\r\n    ErrorsReducer,\r\n})\r\n\r\ntype RootReducerType = typeof rootReducer\r\nexport type AppStateType = ReturnType<RootReducerType>\r\n","/* eslint-disable @typescript-eslint/ban-ts-ignore */\r\nimport { createStore, applyMiddleware } from 'redux'\r\nimport Thanka from 'redux-thunk'\r\nimport { rootReducer } from './root-reducer'\r\n\r\n//@ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\r\nexport const store = createStore(rootReducer, composeEnhancers(applyMiddleware(Thanka)))\r\n\r\ntype PropertiesType<T> = T extends { [key: string]: infer U } ? U : never\r\n\r\nexport type InferActionsType<\r\n    T extends { [key: string]: (...args: any[]) => any }\r\n> = ReturnType<PropertiesType<T>>\r\n","import React from 'react'\r\nimport './style.sass'\r\n\r\nexport const Preloader = () => {\r\n    return (\r\n        <div className=\"loader-layout\">\r\n            <div className=\"lds-spinner\">\r\n                <div />\r\n                <div />\r\n                <div />\r\n                <div />\r\n                <div />\r\n                <div />\r\n                <div />\r\n                <div />\r\n                <div />\r\n                <div />\r\n                <div />\r\n                <div />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useEffect, useCallback, useState } from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { Preloader } from '../../UI/Molecules/Preloader'\r\nimport {\r\n    RepositoriesSelectors,\r\n    RepositoriesThunks,\r\n} from '../../Features/RepositoriesTable'\r\nimport { Input, BlockWrapped } from '../../UI/Atoms'\r\nimport { Paginator, PaginatorSelectors, PaginatorActions } from '../../Features/Paginator'\r\nimport { Table } from '../../Features/RepositoriesTable/Organisms'\r\n\r\nexport const MainPage = (): React.ReactElement => {\r\n    const [value, setValue] = useState('')\r\n\r\n    const dispatch = useDispatch()\r\n    const repositories = useSelector(RepositoriesSelectors.repositories)\r\n    const totalCount = useSelector(RepositoriesSelectors.totalCount)\r\n    const pageSize = useSelector(PaginatorSelectors.pageSize)\r\n    const currentPage = useSelector(PaginatorSelectors.currentPage)\r\n    const portionSize = useSelector(PaginatorSelectors.portionSize)\r\n\r\n    useEffect(() => {\r\n        if (currentPage) localStorage.setItem('currentPage', JSON.stringify(currentPage))\r\n    }, [currentPage])\r\n    \r\n    useEffect(() => {\r\n        const getCurrentPage = localStorage.getItem('currentPage')\r\n        if (getCurrentPage) {\r\n            dispatch(PaginatorActions.setCurrentPage(JSON.parse(getCurrentPage)))\r\n            const getValueInput = localStorage.getItem('valueInput')\r\n            if (getValueInput) {\r\n                dispatch(\r\n                    RepositoriesThunks.searchRepository(\r\n                        getValueInput,\r\n                        JSON.parse(getCurrentPage)\r\n                    )\r\n                )\r\n                setValue(getValueInput)\r\n            } else {\r\n                dispatch(RepositoriesThunks.getRepositories())\r\n            }\r\n        } else {\r\n            dispatch(PaginatorActions.setCurrentPage(1))\r\n            dispatch(RepositoriesThunks.getRepositories())\r\n        }\r\n    }, [dispatch])\r\n\r\n    const onSearchRepository = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\r\n        console.log(1)\r\n        setValue(e.currentTarget.value)\r\n    }, [])\r\n\r\n    const onSendNameOfRepository = useCallback(\r\n        (e: React.KeyboardEvent): void => {\r\n            if (e.key === 'Enter') {\r\n                dispatch(RepositoriesThunks.searchRepository(value, 1))\r\n                localStorage.setItem('valueInput', value)\r\n            }\r\n        },\r\n        [dispatch, value]\r\n    )\r\n\r\n    const onSetCurrentPage = (page: number): void => {\r\n        if (Math.ceil(totalCount / pageSize) !== 1) {\r\n            dispatch(PaginatorActions.setCurrentPage(page))\r\n            dispatch(RepositoriesThunks.searchRepository(value, page))\r\n        }\r\n    }\r\n\r\n    if (!repositories) return <Preloader />\r\n\r\n    return (\r\n        <div>\r\n            <Input\r\n                type=\"text\"\r\n                plHolder=\"Search repository\"\r\n                onChange={onSearchRepository}\r\n                onKeyPress={onSendNameOfRepository}\r\n                value={value}\r\n            />\r\n            <BlockWrapped>\r\n                {repositories.length > 0 ? (\r\n                    <>\r\n                        <Table repositories={repositories} />\r\n                        <BlockWrapped>\r\n                            {' '}\r\n                            <Paginator\r\n                                totalItemsCount={totalCount}\r\n                                pageSize={pageSize}\r\n                                currentPage={currentPage}\r\n                                onSetCurrentPage={onSetCurrentPage}\r\n                                portionSize={portionSize}\r\n                            />\r\n                        </BlockWrapped>\r\n                    </>\r\n                ) : (\r\n                    'Repositories did`t find'\r\n                )}\r\n            </BlockWrapped>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport {\r\n    Info,\r\n    OwnerInfo,\r\n    UsedLanguage,\r\n    Description,\r\n    Contributors,\r\n    CardTitle,\r\n} from '../../Atoms'\r\nimport { UserType } from '../../../API'\r\n\r\nconst Card = styled.div`\r\n    background: #f2f3f4;\r\n    padding: 15px;\r\n`\r\ninterface RepositoryCardPropsType {\r\n    repoName: string\r\n    countStars: number\r\n    dateLastCommit: string\r\n    avatar: string\r\n    nickName: string\r\n    language: null | string | string[]\r\n    description: string\r\n    activeContributes: UserType[]\r\n    link: string\r\n}\r\nexport const RepositoryCard: React.FC<RepositoryCardPropsType> = ({\r\n    repoName,\r\n    countStars,\r\n    dateLastCommit,\r\n    nickName,\r\n    avatar,\r\n    language,\r\n    description,\r\n    activeContributes,\r\n    link,\r\n}) => {\r\n    return (\r\n        <Card>\r\n            <CardTitle title=\"Repository Info\" />\r\n            <OwnerInfo avatar={avatar} nickName={nickName} link={link} />\r\n            <Info\r\n                repoName={repoName}\r\n                countStars={countStars}\r\n                dateLastCommit={dateLastCommit}\r\n            />\r\n            <UsedLanguage language={language} />\r\n            <Description description={description} />\r\n            <Contributors activeContibutes={activeContributes} />\r\n        </Card>\r\n    )\r\n}\r\n","/* eslint-disable @typescript-eslint/camelcase */\r\nimport React, { useEffect } from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport {\r\n    RepositoriesSelectors,\r\n    RepositoriesActions,\r\n} from '../../Features/RepositoriesTable'\r\nimport { RepositoryCard } from '../../UI/Molecules/RepositoryCard'\r\nimport { Preloader } from '../../UI/Molecules/Preloader'\r\n\r\nexport const CardPage = (): React.ReactElement => {\r\n    const dispatch = useDispatch()\r\n    const repositoryInfo = useSelector(RepositoriesSelectors.infoAboutActiveRepository)\r\n    const contributors = useSelector(RepositoriesSelectors.contributors)\r\n    const activeRepositoryId = useSelector(RepositoriesSelectors.activeRepositoryId)\r\n\r\n    useEffect(() => {\r\n        if (contributors)\r\n            localStorage.setItem('contributors', JSON.stringify(contributors))\r\n    }, [contributors])\r\n\r\n    useEffect(() => {\r\n        if (activeRepositoryId)\r\n            localStorage.setItem('activeRepository', JSON.stringify(activeRepositoryId))\r\n    }, [activeRepositoryId])\r\n\r\n    useEffect(() => {\r\n        const getContributors = localStorage.getItem('contributors')\r\n        if (getContributors)\r\n            dispatch(\r\n                RepositoriesActions.setContributesOfActiveRepository(\r\n                    JSON.parse(getContributors)\r\n                )\r\n            )\r\n        const getActiveRepositoryId = localStorage.getItem('activeRepository')\r\n        if (getActiveRepositoryId)\r\n            dispatch(\r\n                RepositoriesActions.setActiveRepository(JSON.parse(getActiveRepositoryId))\r\n            )\r\n        const getRepositories = localStorage.getItem('repositories')\r\n        if (getRepositories)\r\n            dispatch(RepositoriesActions.setRepositories(JSON.parse(getRepositories)))\r\n    }, [dispatch])\r\n\r\n    if (!repositoryInfo || !contributors) return <Preloader />\r\n\r\n    const {\r\n        name,\r\n        stargazers_count,\r\n        updated_at,\r\n        owner: { login, avatar_url, html_url },\r\n        language,\r\n        description,\r\n    } = repositoryInfo[0]\r\n    return (\r\n        <RepositoryCard\r\n            repoName={name}\r\n            countStars={stargazers_count}\r\n            dateLastCommit={updated_at}\r\n            avatar={avatar_url}\r\n            nickName={login}\r\n            language={language}\r\n            description={description}\r\n            activeContributes={contributors}\r\n            link={html_url}\r\n        />\r\n    )\r\n}\r\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useSelector } from 'react-redux'\nimport { Switch, Route } from 'react-router-dom'\nimport { MainPage } from './Components/Pages/Main'\nimport { ErrorsSelectors } from './Components/Features/Errors/Model'\nimport { Error } from './Components/Features/Errors'\nimport { CardPage } from './Components/Pages/Card'\n\nconst Wrapper = styled.div`\n    width: 100%;\n    max-width: 1200px;\n    margin: 0 auto;\n`\n\nexport const App = (): React.ReactElement => {\n    const error = useSelector(ErrorsSelectors.error)\n\n    return (\n        <Wrapper>\n            {error && <Error />}\n            <Switch>\n                <Route path=\"/\" exact component={() => <MainPage />} />\n                <Route path=\"/:repoID?\" component={() => <CardPage />} />\n            </Switch>\n        </Wrapper>\n    )\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport { BrowserRouter } from 'react-router-dom'\nimport * as serviceWorker from './serviceWorker'\nimport { store } from './Components/lib/store/store'\nimport { App } from './App'\nimport './global.sass'\n\nReactDOM.render(\n    <BrowserRouter>\n        <Provider store={store}>\n            <App />\n        </Provider>\n    </BrowserRouter>,\n    document.querySelector('#root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}