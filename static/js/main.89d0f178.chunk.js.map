{"version":3,"sources":["Components/UI/Img/Erorrs/error.svg","Components/UI/Img/User/user.svg","serviceWorker.ts","Components/API/api.ts","Components/Features/RepositoriesTable/Model/types.ts","Components/Features/Errors/Model/selectors.ts","Components/Features/Errors/Model/actions.ts","Components/Features/Errors/Model/types.ts","Components/Features/Errors/Model/reducer.ts","Components/Features/Errors/error.tsx","Components/Features/RepositoriesTable/Model/actions.ts","Components/Features/RepositoriesTable/Model/sagas.ts","Components/Features/RepositoriesTable/Model/selectors.ts","Components/Features/RepositoriesTable/Model/reducer.ts","Components/UI/Atoms/Input.tsx","Components/UI/Atoms/Criterions.tsx","Components/UI/Atoms/BlockWrapped.tsx","Components/UI/Atoms/RepositoryInfo/Contributors.tsx","Components/UI/Atoms/RepositoryInfo/Description.tsx","Components/lib/dateParser.ts","Components/UI/Atoms/RepositoryInfo/Info.tsx","Components/UI/Atoms/Link.tsx","Components/UI/Atoms/RepositoryInfo/OwnerInfo.tsx","Components/UI/Atoms/RepositoryInfo/UsedLanguage.tsx","Components/UI/Atoms/CardTitle.tsx","Components/UI/Atoms/Button.tsx","Components/Features/RepositoriesTable/Atoms/repository.tsx","Components/Features/RepositoriesTable/Molecules/repositories.tsx","Components/Features/RepositoriesTable/Organisms/Table.tsx","Components/Features/Paginator/Model/selectors.ts","Components/Features/Paginator/Model/actions.ts","Components/Features/Paginator/Model/types.ts","Components/Features/Paginator/Model/reducer.ts","Components/Features/Paginator/paginator.tsx","Components/lib/store/root-reducer.ts","Components/lib/store/root-saga.ts","Components/lib/store/store.ts","Components/UI/Molecules/Preloader/Preloader.tsx","Components/Pages/Main/index.tsx","Components/UI/Molecules/RepositoryCard/RepositoryCard.tsx","Components/Pages/Card/index.tsx","Components/Pages/Not Found/index.tsx","App.tsx","index.tsx"],"names":["module","exports","Boolean","window","location","hostname","match","ResponseCode","GET_REPOSITORIES","SEARCH_REPOSITORIES","CONTRIBUTES_OF_ACTIVE_REPOSITORY","SET_REPOSITORIES","SET_REPOSITORIES_THROUGH_SEARCH","TOTAL_COUNT_REPOSITORIES","SET_TOTAL_COUNT_REPOSITORIES","SET_ACTIVE_REPOSITORY","SET_CONTRIBUTES_OF_ACTIVE_REPOSITORY","instance","axios","create","baseURL","headers","RepositoriesAPI","getRepositories","a","get","params","q","sort","order","page","per_page","response","searchRepositories","name","pageNumber","getContributorsOfRepository","fullNameOfRepository","error","state","ErrorsReducer","textErorr","textError","Actions","payload","type","initialState","opacity","keyframes","ErrorItem","styled","div","Img","img","Content","ImgWrapped","Error","useSelector","ErrorsSelectors","dispatch","useDispatch","setTimeout","ErrorsActions","src","ErrorImg","types","searchRepository","getContributesRepository","rootSagaRepo","call","status","OK","put","data","items","numberPage","total_count","fullName","all","takeEvery","repositories","RepositoriesReducer","totalCount","contributors","contributorsOfActiveRepository","activeRepositoryId","infoAboutActiveRepository","createSelector","filter","repositoriy","id","TextField","input","Input","plHolder","onChange","value","onKeyPress","placeholder","Header","Name","Span","span","CountStars","DateLastCommit","LinkGitHub","Criterions","Wrapped","BlockWrapped","children","Contributor","Contributors","activeContibutes","contributorsArray","forEach","contribute","push","login","length","join","DescriptionItem","Description","description","dateParser","date","slice","Repository","RepositoryName","RepositoryStars","RepositoryDateLastCommit","Info","repoName","countStars","dateLastCommit","Link","href","target","className","Owner","WrappedImg","OwnerAvatar","OwnerNickName","OwnerInfo","avatar","nickName","link","AvatarImg","Languages","UsedLanguage","language","Title","CardTitle","title","ButtonS","button","Button","onClick","RepositoryItem","LinkOnGithub","countOfStars","linkOnGithub","repoID","onGetInfoOfRepository","useCallback","RepositoriesActions","RepositoriesTypes","to","style","textTransform","textDecoration","color","RepositoriesList","Repositories","repositoriesItems","map","repository","key","stargazers_count","updated_at","html_url","full_name","RepositoriesTable","Table","pageSize","PaginatorReducer","portionSize","currentPage","PageNumber","NumberList","Paginator","RepositoriesSelectors","PaginatorSelectors","pagesCount","Math","ceil","pages","i","portionCount","useState","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","p","e","PaginatorActions","rootReducer","combineReducers","action","console","log","rootSaga","sagaMiddleware","createSagaMiddleware","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","run","Preloader","MainPage","setValue","useEffect","localStorage","setItem","JSON","stringify","getCurrentPage","getItem","parse","getValueInput","onSearchRepository","currentTarget","onSendNameOfRepository","Card","RepositoryCard","activeContributes","CardPage","repositoryInfo","getContributors","getActiveRepositoryId","owner","avatar_url","NotFound","Wrapper","App","path","exact","component","ReactDOM","render","document","querySelector","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.89d0f178.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/error.6d1bac02.svg\";","module.exports = __webpack_public_path__ + \"static/media/user.051edb19.svg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios from 'axios'\r\nimport { RepositoryType } from './global-types'\r\n/* eslint-disable @typescript-eslint/camelcase */\r\n\r\ninterface DataResponseType {\r\n    items: RepositoryType[]\r\n    total_count: number\r\n    incomplete_results: boolean\r\n}\r\n\r\nexport enum ResponseCode {\r\n    OK = 200,\r\n    NoFound = 404,\r\n}\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://api.github.com',\r\n    headers: {\r\n        'Content-Type': 'application/x-www-form-urlencoded',\r\n    },\r\n})\r\nexport const RepositoriesAPI = {\r\n    getRepositories: async () => {\r\n        try {\r\n            const response = await instance.get<DataResponseType>('search/repositories', {\r\n                params: {\r\n                    q: 'stars',\r\n                    sort: 'stars',\r\n                    order: 'desc',\r\n                    page: 1,\r\n                    per_page: 10,\r\n                },\r\n            })\r\n            return response\r\n        } catch (error) {\r\n            return error\r\n        }\r\n    },\r\n    searchRepositories: async (name: string, pageNumber: number) => {\r\n        try {\r\n            const response = await instance.get<DataResponseType>(\r\n                `search/repositories?q=${name}+in:name`,\r\n                {\r\n                    params: {\r\n                        sort: 'stars',\r\n                        page: pageNumber,\r\n                        per_page: 10,\r\n                    },\r\n                }\r\n            )\r\n            return response\r\n        } catch (error) {\r\n            return error\r\n        }\r\n    },\r\n    getContributorsOfRepository: async (fullNameOfRepository: string) => {\r\n        try {\r\n            const response = await instance.get(\r\n                `repos/${fullNameOfRepository}/contributors`,\r\n                {\r\n                    params: {\r\n                        per_page: 10,\r\n                    },\r\n                }\r\n            )\r\n            return response\r\n        } catch (error) {\r\n            return error\r\n        }\r\n    },\r\n}\r\n","export const GET_REPOSITORIES = 'GET_REPOSITORIES'\r\nexport const SEARCH_REPOSITORIES = 'SEARCH_REPOSITORIES'\r\nexport const CONTRIBUTES_OF_ACTIVE_REPOSITORY = 'GET_CONTRIBUTES_OF_ACTIVE_REPOSITORY'\r\n\r\nexport const SET_REPOSITORIES = 'SET_REPOSITORIES'\r\nexport const SET_REPOSITORIES_THROUGH_SEARCH = 'GET_REPOSITORIES_THROUGH_SEARCH'\r\nexport const TOTAL_COUNT_REPOSITORIES = 'TOTAL_COUNT_REPOSITORIES'\r\nexport const SET_TOTAL_COUNT_REPOSITORIES = 'GET_TOTAL_COUNT_REPOSITORIES'\r\nexport const SET_ACTIVE_REPOSITORY = 'SET_ACTIVE_REPOSITORY'\r\nexport const SET_CONTRIBUTES_OF_ACTIVE_REPOSITORY = 'SET_CONTRIBUTES_OF_ACTIVE_REPOSITORY'\r\n","import { AppStateType } from '../../../lib/store'\r\n\r\nexport const error = (state: AppStateType): boolean => state.ErrorsReducer.error\r\nexport const textErorr = (state: AppStateType): string => state.ErrorsReducer.textError\r\n","import { InferActionsType } from '../../../lib/store'\r\nimport * as types from './types'\r\n\r\ninterface SetErrorPayloadType {\r\n    error: boolean\r\n    textError: string\r\n}\r\nexport const Actions = {\r\n    setError: (payload: SetErrorPayloadType) =>\r\n        ({\r\n            type: types.SET_ERROR,\r\n            payload,\r\n        } as const),\r\n}\r\n\r\nexport type ActionsType = InferActionsType<typeof Actions>\r\n","export const SET_ERROR = 'SET_ERROR'\r\n","import { ActionsType } from './actions'\r\nimport * as types from './types'\r\n\r\nconst initialState = {\r\n    error: false as boolean,\r\n    textError: '' as string,\r\n}\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const Reducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case types.SET_ERROR:\r\n            return {\r\n                ...state,\r\n                error: action.payload.error,\r\n                textError: action.payload.textError,\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","import React from 'react'\r\nimport styled, { keyframes } from 'styled-components'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport ErrorImg from '../../UI/Img/Erorrs/error.svg'\r\nimport { ErrorsSelectors, ErrorsActions } from './Model'\r\n\r\nconst opacity = keyframes`\r\n    0% {\r\n        opacity: 0;\r\n    }\r\n    5% {\r\n        opacity: .5\r\n    }\r\n    10% {\r\n        opacity: 1;\r\n    }\r\n    30% {\r\n        opacity: 1;\r\n    }\r\n    50% {\r\n        opacity: 1;\r\n    }\r\n    70% {\r\n        opacity: 1;\r\n    }\r\n    90% {\r\n        opacity: 1;\r\n    }\r\n    95% {\r\n        opacity: .5;\r\n    }\r\n    100% {\r\n        opacity: 0;\r\n    }\r\n`\r\nconst ErrorItem = styled.div`\r\n    position: absolute;\r\n    left: 50%;\r\n    top: 0;\r\n    transform: translate(-50%, 0);\r\n    width: auto;\r\n    height: 50px;\r\n    background: white;\r\n    color: black;\r\n    border: 1px solid black;\r\n    display: grid;  \r\n    grid-template-columns: max-content max-content;\r\n    text-align: center;\r\n    justify-content: center;\r\n    align-items: center;\r\n    padding: 0 15px;\r\n    animation: ${opacity} 8s linear;\r\n`\r\n\r\nconst Img = styled.img`\r\n    width: 20px;\r\n    height: 20px;\r\n`\r\nconst Content = styled.div`\r\n    margin-left: 10px;\r\n`\r\nconst ImgWrapped = styled.div``\r\n\r\nexport const Error = (): React.ReactElement => {\r\n    const textError = useSelector(ErrorsSelectors.textErorr)\r\n    const dispatch = useDispatch()\r\n    setTimeout(() => {\r\n        dispatch(ErrorsActions.setError({ error: false, textError: '' }))\r\n    }, 8000)\r\n    return (\r\n        <ErrorItem>\r\n            <ImgWrapped>\r\n                <Img src={ErrorImg} />\r\n            </ImgWrapped>\r\n            <Content>{textError}</Content>\r\n        </ErrorItem>\r\n    )\r\n}\r\n","import { InferActionsType } from '../../../lib/store'\r\nimport { RepositoryType, UserType } from '../../../API'\r\n\r\nimport * as types from './types'\r\n\r\nexport const Actions = {\r\n    setRepositories: (payload: RepositoryType[]) =>\r\n        ({\r\n            type: types.SET_REPOSITORIES,\r\n            payload,\r\n        } as const),\r\n    setTotalCountOfRepositories: (payload: number) =>\r\n        ({\r\n            type: types.SET_TOTAL_COUNT_REPOSITORIES,\r\n            payload,\r\n        } as const),\r\n    setContributesOfActiveRepository: (payload: UserType[]) =>\r\n        ({\r\n            type: types.SET_CONTRIBUTES_OF_ACTIVE_REPOSITORY,\r\n            payload,\r\n        } as const),\r\n    setActiveRepository: (payload: number) =>\r\n        ({\r\n            type: types.SET_ACTIVE_REPOSITORY,\r\n            payload,\r\n        } as const),\r\n}\r\n\r\nexport type ActionsType = InferActionsType<typeof Actions>\r\n","/* eslint-disable @typescript-eslint/explicit-function-return-type */\r\nimport { put, takeEvery, all, call } from 'redux-saga/effects'\r\nimport { RepositoriesAPI, ResponseCode } from '../../../API'\r\n\r\nimport { ErrorsActions } from '../../Errors'\r\nimport {\r\n    GET_REPOSITORIES,\r\n    SEARCH_REPOSITORIES,\r\n    CONTRIBUTES_OF_ACTIVE_REPOSITORY,\r\n} from './types'\r\nimport { Actions } from './actions'\r\n\r\nexport function* getRepositories() {\r\n    const response = yield call(RepositoriesAPI.getRepositories)\r\n    if (response.status === ResponseCode.OK)\r\n        yield put(Actions.setRepositories(response.data.items))\r\n    else\r\n        yield put(\r\n            ErrorsActions.setError({\r\n                error: true,\r\n                textError: 'Please, refresh the page.',\r\n            })\r\n        )\r\n}\r\n\r\ninterface SearchRepositoryPayloadType {\r\n    type: string\r\n    payload: { name: string; numberPage: number }\r\n}\r\nexport function* searchRepository({ payload }: SearchRepositoryPayloadType) {\r\n    const { name, numberPage } = payload\r\n    const response = yield call(RepositoriesAPI.searchRepositories, name, numberPage)\r\n    if (response.status === ResponseCode.OK) {\r\n        yield put(Actions.setRepositories(response.data.items))\r\n        yield put(Actions.setTotalCountOfRepositories(response.data.total_count))\r\n    } else\r\n        yield put(\r\n            ErrorsActions.setError({\r\n                error: true,\r\n                textError: 'Please, refresh the page.',\r\n            })\r\n        )\r\n}\r\n\r\ninterface GetContributesRepositoryPayloadType {\r\n    type: string\r\n    payload: { fullName: string }\r\n}\r\nexport function* getContributesRepository({\r\n    payload,\r\n}: GetContributesRepositoryPayloadType) {\r\n    const { fullName } = payload\r\n    const response = yield call(RepositoriesAPI.getContributorsOfRepository, fullName)\r\n    if (response.status === ResponseCode.OK) {\r\n        yield put(Actions.setContributesOfActiveRepository(response.data))\r\n    } else\r\n        yield put(\r\n            ErrorsActions.setError({\r\n                error: true,\r\n                textError: 'Happend error. Refresh the page.',\r\n            })\r\n        )\r\n}\r\n\r\nexport function* rootSagaRepo() {\r\n    yield all([\r\n        takeEvery(GET_REPOSITORIES, getRepositories),\r\n        takeEvery(SEARCH_REPOSITORIES, searchRepository),\r\n        takeEvery(CONTRIBUTES_OF_ACTIVE_REPOSITORY, getContributesRepository),\r\n    ])\r\n}\r\n","import { createSelector } from 'reselect'\r\nimport { AppStateType } from '../../../lib/store'\r\nimport { RepositoryType, UserType } from '../../../API'\r\n\r\nexport const repositories = (state: AppStateType): RepositoryType[] | null =>\r\n    state.RepositoriesReducer.repositories\r\n\r\nexport const totalCount = (state: AppStateType): number =>\r\n    state.RepositoriesReducer.totalCount\r\n\r\nexport const contributors = (state: AppStateType): UserType[] | null =>\r\n    state.RepositoriesReducer.contributorsOfActiveRepository\r\n\r\nexport const activeRepositoryId = (state: AppStateType): number | null =>\r\n    state.RepositoriesReducer.activeRepositoryId\r\n\r\nexport const infoAboutActiveRepository = createSelector(\r\n    [activeRepositoryId, repositories],\r\n    (activeRepositoryId, repositories) =>\r\n        repositories?.filter((repositoriy) => repositoriy.id === activeRepositoryId)\r\n)\r\n","import { RepositoryType, UserType } from '../../../API'\r\nimport * as types from './types'\r\nimport { ActionsType } from './actions'\r\n\r\nconst initialState = {\r\n    repositories: null as RepositoryType[] | null,\r\n    totalCount: 10,\r\n    contributorsOfActiveRepository: null as UserType[] | null,\r\n    activeRepositoryId: null as number | null,\r\n}\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const Reducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case types.SET_REPOSITORIES:\r\n            console.log(action)\r\n            return {\r\n                ...state,\r\n                repositories: action.payload,\r\n            }\r\n        case types.SET_TOTAL_COUNT_REPOSITORIES:\r\n            return {\r\n                ...state,\r\n                totalCount: action.payload,\r\n            }\r\n        case types.SET_ACTIVE_REPOSITORY:\r\n            return {\r\n                ...state,\r\n                activeRepositoryId: action.payload,\r\n            }\r\n        case types.SET_CONTRIBUTES_OF_ACTIVE_REPOSITORY:\r\n            return {\r\n                ...state,\r\n                contributorsOfActiveRepository: action.payload,\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nconst TextField = styled.input`\r\n    border: 1px solid black;\r\n    background: white;\r\n    margin: 0;\r\n    padding: 10px;\r\n    max-width: 275px;\r\n    width: 100%;\r\n`\r\n\r\ninterface InputPropsType {\r\n    type: string\r\n    plHolder: string\r\n    onChange: (e: React.ChangeEvent<HTMLInputElement>) => void\r\n    onKeyPress: (e: React.KeyboardEvent) => void\r\n    value: string\r\n}\r\nexport const Input: React.FC<InputPropsType> = ({\r\n    type,\r\n    plHolder,\r\n    onChange,\r\n    value,\r\n    onKeyPress,\r\n}) => {\r\n    return (\r\n        <TextField\r\n            type={type}\r\n            placeholder={plHolder}\r\n            onChange={onChange}\r\n            value={value}\r\n            onKeyPress={onKeyPress}\r\n        />\r\n    )\r\n}\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nconst Header = styled.div`\r\n    display: grid;\r\n    grid-template-columns: 1fr 1fr 1fr 1fr;\r\n    font-weight: bold;\r\n    background: #f2f3f4;\r\n    color: black;\r\n    padding: 0 10px;\r\n    margin-top: 15px;\r\n    text-align: center;\r\n    border: 1px solid black;\r\n    border-top-left-radius: 10px;\r\n    border-top-right-radius: 10px;\r\n`\r\nconst Name = styled.div``\r\nconst Span = styled.span`\r\n    padding: 10px;\r\n    display: block;\r\n`\r\nconst CountStars = styled.div`\r\n    border-right: 1px solid black;\r\n    border-left: 1px solid black;\r\n`\r\nconst DateLastCommit = styled.div`\r\n    border-right: 1px solid black;\r\n`\r\n\r\nconst LinkGitHub = styled.div``\r\nexport const Criterions = () => {\r\n    return (\r\n        <Header>\r\n            <Name>\r\n                <Span>Name</Span>\r\n            </Name>\r\n            <CountStars>\r\n                <Span>Stars Count</Span>\r\n            </CountStars>\r\n            <DateLastCommit>\r\n                <Span>Date last Commit</Span>\r\n            </DateLastCommit>\r\n            <LinkGitHub>\r\n                <Span>Link on Github</Span>\r\n            </LinkGitHub>\r\n        </Header>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nconst Wrapped = styled.div`\r\n    text-align: center;\r\n`\r\ninterface PaginatorWrappedProps {\r\n    children: React.ReactNode\r\n}\r\nexport const BlockWrapped: React.FC<PaginatorWrappedProps> = ({ children }) => (\r\n    <Wrapped>{children}</Wrapped>\r\n)\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { UserType } from '../../../API'\r\n\r\nconst Contributor = styled.div``\r\nconst Span = styled.span`\r\n    font-weight: 800;\r\n    font-size: 16px;\r\n`\r\ninterface ActiveContributesPropsType {\r\n    activeContibutes: UserType[]\r\n}\r\nexport const Contributors: React.FC<ActiveContributesPropsType> = ({\r\n    activeContibutes,\r\n}) => {\r\n    const contributorsArray: string[] = []\r\n    activeContibutes.forEach((contribute) => contributorsArray.push(contribute.login))\r\n\r\n    return (\r\n        <Contributor>\r\n            <Span>Active Contributors: </Span>\r\n            {contributorsArray.length > 0\r\n                ? contributorsArray.join(', ')\r\n                : 'This repository haven`t contributors'}\r\n        </Contributor>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nconst DescriptionItem = styled.div``\r\nconst Span = styled.span`\r\n    font-weight: 800;\r\n    font-size: 16px;\r\n`\r\ninterface DescriptionRepositoryPropsType {\r\n    description: string\r\n}\r\nexport const Description: React.FC<DescriptionRepositoryPropsType> = ({\r\n    description,\r\n}) => {\r\n    return (\r\n        <DescriptionItem>\r\n            <Span>Description: </Span>\r\n            {description}\r\n        </DescriptionItem>\r\n    )\r\n}\r\n","export const dateParser = (date: string) => {\r\n    const parseDate = date.slice(0, 10)\r\n    return parseDate\r\n}\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { dateParser } from '../../../lib/dateParser'\r\n\r\nconst Repository = styled.div`\r\n    display: grid;\r\n`\r\nconst Span = styled.span`\r\n    font-weight: 800;\r\n    font-size: 16px;\r\n`\r\nconst RepositoryName = styled.div``\r\nconst RepositoryStars = styled.div``\r\nconst RepositoryDateLastCommit = styled.div``\r\n\r\ninterface RepositoryInfoPropsType {\r\n    repoName: string\r\n    countStars: number\r\n    dateLastCommit: string\r\n}\r\nexport const Info: React.FC<RepositoryInfoPropsType> = ({\r\n    repoName,\r\n    countStars,\r\n    dateLastCommit,\r\n}) => {\r\n    const date = dateParser(dateLastCommit)\r\n    return (\r\n        <Repository>\r\n            <RepositoryName>\r\n                <Span>Name:</Span> {repoName}\r\n            </RepositoryName>\r\n            <RepositoryStars>\r\n                <Span>Stars:</Span> {countStars}\r\n            </RepositoryStars>\r\n            <RepositoryDateLastCommit>\r\n                <Span>Update:</Span> {date}\r\n            </RepositoryDateLastCommit>\r\n        </Repository>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\ninterface LinkPropsType {\r\n    children: React.ReactNode\r\n    href: string\r\n    target: string\r\n    className?: string\r\n}\r\nexport const Link: React.FC<LinkPropsType> = ({ children, href, target, className }) => {\r\n    return (\r\n        <a href={href} target={target} className={className}>\r\n            {children}\r\n        </a>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport AvatarImg from '../../Img/User/user.svg'\r\nimport { Link } from '../Link'\r\n\r\nconst Owner = styled.div`\r\n    display: grid;\r\n    grid-template-columns: max-content max-content max-content;\r\n    align-items: center;\r\n`\r\nconst WrappedImg = styled.div``\r\nconst OwnerAvatar = styled.img`\r\n    border-radius: 10px;\r\n    width: 40px;\r\n    height: 40px;\r\n`\r\nconst OwnerNickName = styled(Link)`\r\n    display: block;\r\n    text-transform: none;\r\n    text-decoration: none;\r\n    margin-left: 10px;\r\n    color: inherit;\r\n`\r\nconst Span = styled.span`\r\n    font-weight: 800;\r\n    font-size: 16px;\r\n    margin-right: 5px;\r\n`\r\ninterface OwnerInfoPropsType {\r\n    avatar: string\r\n    nickName: string\r\n    link: string\r\n}\r\nexport const OwnerInfo: React.FC<OwnerInfoPropsType> = ({ avatar, nickName, link }) => {\r\n    return (\r\n        <Owner>\r\n            <Span>Owner: </Span>\r\n            <WrappedImg>\r\n                <OwnerAvatar src={avatar ? avatar : AvatarImg} />\r\n            </WrappedImg>\r\n            <OwnerNickName href={link} target=\"_blank\">\r\n                {nickName}\r\n            </OwnerNickName>\r\n        </Owner>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nconst Languages = styled.div``\r\nconst Span = styled.span`\r\n    font-weight: 800;\r\n    font-size: 16px;\r\n`\r\ninterface ListUsedLanguagePropsType {\r\n    language: string | null | string[]\r\n}\r\nexport const UsedLanguage: React.FC<ListUsedLanguagePropsType> = ({ language }) => {\r\n    return (\r\n        <Languages>\r\n            <Span>Language: </Span>\r\n            {language ? language : 'Language isn`t use'}\r\n        </Languages>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nconst Title = styled.div`\r\n    text-align: center;\r\n    font-weight: 800;\r\n    font-size: 20px;\r\n`\r\n\r\ninterface CardTitlePropsType {\r\n    title: string\r\n}\r\nexport const CardTitle: React.FC<CardTitlePropsType> = ({ title }) => {\r\n    return <Title>{title}</Title>\r\n}\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nconst ButtonS = styled.button`\r\n    background: none;\r\n    padding: 0 5px;\r\n    margin: 0;\r\n    border: 0;\r\n    outline: none;\r\n    color: black;\r\n`\r\n\r\ninterface ButtonPropsType {\r\n    children: React.ReactNode\r\n    onClick: () => void\r\n}\r\n\r\nexport const Button: React.FC<ButtonPropsType> = ({ children, onClick }) => {\r\n    return <ButtonS onClick={onClick}>{children}</ButtonS>\r\n}\r\n","import React, { useCallback } from 'react'\r\nimport styled from 'styled-components'\r\nimport { NavLink } from 'react-router-dom'\r\nimport { useDispatch } from 'react-redux'\r\nimport { RepositoriesActions, RepositoriesTypes } from '../Model'\r\nimport { Link } from '../../../UI/Atoms'\r\nimport { dateParser } from '../../../lib/dateParser'\r\n\r\nconst RepositoryItem = styled.div`\r\n    display: grid;\r\n    grid-template-columns: 1fr 1fr 1fr 1fr;\r\n    background: #f2f3f4;\r\n    color: black;\r\n    padding: 10px 10px;\r\n    text-align: center;\r\n    &:hover {\r\n        background: white;\r\n    }\r\n    border-right: 1px solid black;\r\n    border-left: 1px solid black;\r\n    border: 1px solid black;\r\n    word-break: break-word;\r\n`\r\n\r\nconst Name = styled.div`\r\n    cursor: pointer;\r\n    text-transform: none;\r\n    word-break: break-word;\r\n`\r\nconst CountStars = styled.span`\r\n    border-right: 1px solid black;\r\n    border-left: 1px solid black;\r\n    word-break: break-word;\r\n`\r\nconst DateLastCommit = styled.span`\r\n    border-right: 1px solid black;\r\n    word-break: break-word;\r\n`\r\nconst LinkOnGithub = styled(Link)`\r\n    text-transform: none;\r\n    text-decoration: none;\r\n    word-break: break-word;\r\n    margin-left: 10px;\r\n    color: inherit;\r\n`\r\n\r\ninterface RepositoriesPropsType {\r\n    name: string\r\n    countOfStars: number\r\n    dateLastCommit: string\r\n    linkOnGithub: string\r\n    repoID: number\r\n    fullName: string\r\n}\r\n\r\nexport const Repository: React.FC<RepositoriesPropsType> = ({\r\n    name,\r\n    countOfStars,\r\n    dateLastCommit,\r\n    linkOnGithub,\r\n    repoID,\r\n    fullName,\r\n}) => {\r\n    const dispatch = useDispatch()\r\n    const onGetInfoOfRepository = useCallback(() => {\r\n        dispatch(RepositoriesActions.setActiveRepository(repoID))\r\n        dispatch({\r\n            type: RepositoriesTypes.CONTRIBUTES_OF_ACTIVE_REPOSITORY,\r\n            payload: { fullName },\r\n        })\r\n    }, [dispatch, repoID, fullName])\r\n\r\n    const date = dateParser(dateLastCommit)\r\n    return (\r\n        <RepositoryItem>\r\n            <Name>\r\n                <NavLink\r\n                    onClick={onGetInfoOfRepository}\r\n                    to={'/' + repoID}\r\n                    style={{\r\n                        textTransform: 'none',\r\n                        textDecoration: 'none',\r\n                        color: 'black',\r\n                    }}\r\n                >\r\n                    {name}\r\n                </NavLink>\r\n            </Name>\r\n            <CountStars>{countOfStars}</CountStars>\r\n            <DateLastCommit>{date}</DateLastCommit>\r\n            <LinkOnGithub href={linkOnGithub} target=\"_blank\">\r\n                {' '}\r\n                Link\r\n            </LinkOnGithub>\r\n        </RepositoryItem>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Repository } from '../Atoms'\r\nimport { RepositoryType } from '../../../API'\r\n\r\nconst RepositoriesList = styled.div``\r\ninterface RepositoriesPropsType {\r\n    repositories: RepositoryType[]\r\n}\r\nexport const Repositories: React.FC<RepositoriesPropsType> = ({ repositories }) => {\r\n    const repositoriesItems = repositories.map((repository) => {\r\n        return (\r\n            <Repository\r\n                key={repository.id}\r\n                name={repository.name}\r\n                countOfStars={repository.stargazers_count}\r\n                dateLastCommit={repository.updated_at}\r\n                linkOnGithub={repository.html_url}\r\n                repoID={repository.id}\r\n                fullName={repository.full_name}\r\n            />\r\n        )\r\n    })\r\n    return <RepositoriesList>{repositoriesItems}</RepositoriesList>\r\n}\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Criterions } from '../../../UI/Atoms'\r\nimport { Repositories } from '../Molecules'\r\nimport { RepositoryType } from '../../../API'\r\n\r\nconst RepositoriesTable = styled.div``\r\n\r\ninterface RepositoriesTablePropsType {\r\n    repositories: RepositoryType[]\r\n}\r\nexport const Table: React.FC<RepositoriesTablePropsType> = ({ repositories }) => {\r\n    return (\r\n        <RepositoriesTable>\r\n            <Criterions />\r\n            <Repositories repositories={repositories} />\r\n        </RepositoriesTable>\r\n    )\r\n}\r\n","import { AppStateType } from '../../../lib/store/index'\r\n\r\nexport const pageSize = (state: AppStateType): number => state.PaginatorReducer.pageSize\r\n\r\nexport const portionSize = (state: AppStateType): number =>\r\n    state.PaginatorReducer.portionSize\r\n\r\nexport const currentPage = (state: AppStateType): number | null =>\r\n    state.PaginatorReducer.currentPage\r\n","import { InferActionsType } from '../../../lib/store/store'\r\nimport * as types from './types'\r\n\r\nexport const Actions = {\r\n    setCurrentPage: (payload: number) =>\r\n        ({\r\n            type: types.SET_CURRENT_PAGE,\r\n            payload,\r\n        } as const),\r\n}\r\n\r\nexport type ActionsType = InferActionsType<typeof Actions>\r\n","export const SET_CURRENT_PAGE = 'SET_CURRENT_PAGE'\r\n","import * as types from './types'\r\nimport { ActionsType } from './actions'\r\n\r\nconst initialState = {\r\n    pageSize: 10,\r\n    portionSize: 3,\r\n    currentPage: null as number | null,\r\n}\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const Reducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case types.SET_CURRENT_PAGE:\r\n            return {\r\n                ...state,\r\n                currentPage: action.payload,\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","import React, { useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport './style.sass'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { Button } from '../../UI/Atoms'\r\nimport { RepositoriesSelectors } from '../RepositoriesTable'\r\nimport { PaginatorSelectors, PaginatorActions } from './Model'\r\nimport { RepositoriesTypes } from '../RepositoriesTable/Model'\r\n\r\nconst PageNumber = styled.span`\r\n    color: black;\r\n    padding: 8px 16px;\r\n    text-decoration: none;\r\n    transition: background-color 0.3s;\r\n    border: 1px solid #ddd;\r\n    cursor: pointer;\r\n    &:hover:not(.selectedPage) {\r\n        background: #f2f2f2;\r\n    }\r\n`\r\nconst NumberList = styled.div`\r\n    display: inline-block;\r\n    margin-top: 10px;\r\n`\r\n\r\nexport interface PropsType {\r\n    value: string\r\n}\r\n\r\nexport const Paginator: React.FC<PropsType> = ({value}) => {\r\n    const dispatch = useDispatch()\r\n    const totalCount = useSelector(RepositoriesSelectors.totalCount)\r\n    const pageSize = useSelector(PaginatorSelectors.pageSize)\r\n    const currentPage = useSelector(PaginatorSelectors.currentPage)\r\n    const portionSize = useSelector(PaginatorSelectors.portionSize)\r\n\r\n    const pagesCount = Math.ceil(totalCount / pageSize)\r\n    const pages: number[] = []\r\n\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        if (i <= 10) pages.push(i)\r\n    }\r\n\r\n    const onSetCurrentPage = (page: number): void => {\r\n        if (Math.ceil(totalCount / pageSize) !== 1) {\r\n            dispatch(PaginatorActions.setCurrentPage(page))\r\n            dispatch({\r\n                type: RepositoriesTypes.SEARCH_REPOSITORIES,\r\n                payload: { name: value, numberPage: page },\r\n            })\r\n        }\r\n    }\r\n\r\n    const portionCount = Math.ceil(pagesCount < 10 ? pagesCount : 10 / portionSize)\r\n    const [portionNumber, setPortionNumber] = useState(1)\r\n\r\n    const leftPortionPageNumber = (portionNumber - 1) * portionSize + 1\r\n    const rightPortionPageNumber = portionNumber * portionSize\r\n\r\n    return (\r\n        <NumberList>\r\n            {portionNumber > 1 && (\r\n                <>\r\n                    <Button\r\n                        onClick={() => {\r\n                            setPortionNumber(1)\r\n                        }}\r\n                    >\r\n                        ««\r\n                    </Button>\r\n                    <Button\r\n                        onClick={() => {\r\n                            setPortionNumber(1)\r\n                            setPortionNumber(portionNumber - 1)\r\n                        }}\r\n                    >\r\n                        «\r\n                    </Button>\r\n                </>\r\n            )}\r\n            {pages\r\n                .filter((p) => p >= leftPortionPageNumber && p <= rightPortionPageNumber)\r\n                .map((p) => {\r\n                    return (\r\n                        <PageNumber\r\n                            key={p}\r\n                            className={`${currentPage === p ? 'selectedPage' : ''}`}\r\n                            onClick={(e) => {\r\n                                onSetCurrentPage(p)\r\n                            }}\r\n                        >\r\n                            {p}\r\n                        </PageNumber>\r\n                    )\r\n                })}\r\n            {portionNumber < portionCount && (\r\n                <>\r\n                    <Button\r\n                        onClick={() => {\r\n                            setPortionNumber(portionNumber + 1)\r\n                        }}\r\n                    >\r\n                        »\r\n                    </Button>\r\n                    <Button\r\n                        onClick={() => {\r\n                            setPortionNumber(portionCount)\r\n                        }}\r\n                    >\r\n                        »»\r\n                    </Button>\r\n                </>\r\n            )}\r\n            {}\r\n        </NumberList>\r\n    )\r\n}\r\n","import { combineReducers } from 'redux'\r\nimport { RepositoriesReducer } from '../../Features/RepositoriesTable'\r\nimport { PaginatorReducer } from '../../Features/Paginator'\r\nimport { ErrorsReducer } from '../../Features/Errors'\r\n\r\nexport const rootReducer = combineReducers({\r\n    RepositoriesReducer,\r\n    PaginatorReducer,\r\n    ErrorsReducer,\r\n})\r\n\r\ntype RootReducerType = typeof rootReducer\r\nexport type AppStateType = ReturnType<RootReducerType>\r\n","import { all, AllEffect, ForkEffect } from 'redux-saga/effects'\r\nimport { rootSagaRepo } from '../../Features/RepositoriesTable/Model/sagas'\r\n\r\nexport function* rootSaga(): Generator<\r\n    AllEffect<Generator<AllEffect<ForkEffect<never>>, void, unknown>>,\r\n    void,\r\n    unknown\r\n> {\r\n    yield all([rootSagaRepo()])\r\n}\r\n","/* eslint-disable @typescript-eslint/ban-ts-ignore */\r\nimport { createStore, applyMiddleware } from 'redux'\r\nimport createSagaMiddleware from 'redux-saga'\r\nimport { rootReducer } from './root-reducer'\r\nimport { rootSaga } from './root-saga'\r\n\r\nconst sagaMiddleware = createSagaMiddleware()\r\n//@ts-ignore\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\r\nexport const store = createStore(\r\n    rootReducer,\r\n    composeEnhancers(applyMiddleware(sagaMiddleware))\r\n)\r\n\r\nsagaMiddleware.run(rootSaga)\r\ntype PropertiesType<T> = T extends { [key: string]: infer U } ? U : never\r\n\r\nexport type InferActionsType<\r\n    T extends { [key: string]: (...args: any[]) => any }\r\n> = ReturnType<PropertiesType<T>>\r\n","import React from 'react'\r\nimport './style.sass'\r\n\r\nexport const Preloader = () => {\r\n    return (\r\n        <div className=\"loader-layout\">\r\n            <div className=\"lds-spinner\">\r\n                <div />\r\n                <div />\r\n                <div />\r\n                <div />\r\n                <div />\r\n                <div />\r\n                <div />\r\n                <div />\r\n                <div />\r\n                <div />\r\n                <div />\r\n                <div />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useEffect, useCallback, useState } from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { Preloader } from '../../UI/Molecules/Preloader'\r\nimport { RepositoriesSelectors } from '../../Features/RepositoriesTable'\r\nimport { Input, BlockWrapped } from '../../UI/Atoms'\r\nimport { Paginator, PaginatorSelectors, PaginatorActions } from '../../Features/Paginator'\r\nimport { Table } from '../../Features/RepositoriesTable/Organisms'\r\nimport { RepositoriesTypes } from '../../Features/RepositoriesTable/Model'\r\n\r\nexport const MainPage = (): React.ReactElement => {\r\n    const [value, setValue] = useState('')\r\n\r\n    const dispatch = useDispatch()\r\n    const repositories = useSelector(RepositoriesSelectors.repositories)\r\n    const currentPage = useSelector(PaginatorSelectors.currentPage)\r\n\r\n    useEffect(() => {\r\n        if (currentPage) localStorage.setItem('currentPage', JSON.stringify(currentPage))\r\n    }, [currentPage])\r\n\r\n    useEffect(() => {\r\n        if (repositories)\r\n            localStorage.setItem('repositories', JSON.stringify(repositories))\r\n    }, [repositories])\r\n\r\n    useEffect(() => {\r\n        const getCurrentPage = localStorage.getItem('currentPage')\r\n        if (getCurrentPage) {\r\n            dispatch(PaginatorActions.setCurrentPage(JSON.parse(getCurrentPage)))\r\n            const getValueInput = localStorage.getItem('valueInput')\r\n            if (getValueInput) {\r\n                dispatch({\r\n                    type: RepositoriesTypes.SEARCH_REPOSITORIES,\r\n                    payload: {\r\n                        name: getValueInput,\r\n                        numberPage: JSON.parse(getCurrentPage),\r\n                    },\r\n                })\r\n                setValue(getValueInput)\r\n            } else {\r\n                dispatch({ type: RepositoriesTypes.GET_REPOSITORIES })\r\n            }\r\n        } else {\r\n            dispatch(PaginatorActions.setCurrentPage(1))\r\n            dispatch({ type: RepositoriesTypes.GET_REPOSITORIES })\r\n        }\r\n    }, [dispatch])\r\n\r\n    const onSearchRepository = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setValue(e.currentTarget.value)\r\n    }, [])\r\n\r\n    const onSendNameOfRepository = useCallback(\r\n        (e: React.KeyboardEvent): void => {\r\n            if (e.key === 'Enter') {\r\n                dispatch({\r\n                    type: RepositoriesTypes.SEARCH_REPOSITORIES,\r\n                    payload: { name: value, numberPage: 1 },\r\n                })\r\n                localStorage.setItem('valueInput', value)\r\n            }\r\n        },\r\n        [dispatch, value]\r\n    )\r\n\r\n    if (!repositories) return <Preloader />\r\n\r\n    return (\r\n        <div>\r\n            <Input\r\n                type=\"text\"\r\n                plHolder=\"Search repository\"\r\n                onChange={onSearchRepository}\r\n                onKeyPress={onSendNameOfRepository}\r\n                value={value}\r\n            />\r\n            <BlockWrapped>\r\n                {repositories.length > 0 ? (\r\n                    <>\r\n                        <Table repositories={repositories} />\r\n                        <BlockWrapped>\r\n                            {' '}\r\n                            <Paginator value={value}/>\r\n                        </BlockWrapped>\r\n                    </>\r\n                ) : (\r\n                    'Repositories did`t find'\r\n                )}\r\n            </BlockWrapped>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport {\r\n    Info,\r\n    OwnerInfo,\r\n    UsedLanguage,\r\n    Description,\r\n    Contributors,\r\n    CardTitle,\r\n} from '../../Atoms'\r\nimport { UserType } from '../../../API'\r\n\r\nconst Card = styled.div`\r\n    background: #f2f3f4;\r\n    padding: 15px;\r\n`\r\ninterface RepositoryCardPropsType {\r\n    repoName: string\r\n    countStars: number\r\n    dateLastCommit: string\r\n    avatar: string\r\n    nickName: string\r\n    language: null | string | string[]\r\n    description: string\r\n    activeContributes: UserType[]\r\n    link: string\r\n}\r\nexport const RepositoryCard: React.FC<RepositoryCardPropsType> = ({\r\n    repoName,\r\n    countStars,\r\n    dateLastCommit,\r\n    nickName,\r\n    avatar,\r\n    language,\r\n    description,\r\n    activeContributes,\r\n    link,\r\n}) => {\r\n    return (\r\n        <Card>\r\n            <CardTitle title=\"Repository Info\" />\r\n            <OwnerInfo avatar={avatar} nickName={nickName} link={link} />\r\n            <Info\r\n                repoName={repoName}\r\n                countStars={countStars}\r\n                dateLastCommit={dateLastCommit}\r\n            />\r\n            <UsedLanguage language={language} />\r\n            <Description description={description} />\r\n            <Contributors activeContibutes={activeContributes} />\r\n        </Card>\r\n    )\r\n}\r\n","/* eslint-disable @typescript-eslint/camelcase */\r\nimport React, { useEffect } from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport {\r\n    RepositoriesSelectors,\r\n    RepositoriesActions,\r\n} from '../../Features/RepositoriesTable'\r\nimport { RepositoryCard } from '../../UI/Molecules/RepositoryCard'\r\nimport { Preloader } from '../../UI/Molecules/Preloader'\r\n\r\nexport const CardPage = (): React.ReactElement => {\r\n    const dispatch = useDispatch()\r\n    const repositoryInfo = useSelector(RepositoriesSelectors.infoAboutActiveRepository)\r\n    const contributors = useSelector(RepositoriesSelectors.contributors)\r\n    const activeRepositoryId = useSelector(RepositoriesSelectors.activeRepositoryId)\r\n\r\n    useEffect(() => {\r\n        if (contributors)\r\n            localStorage.setItem('contributors', JSON.stringify(contributors))\r\n    }, [contributors])\r\n\r\n    useEffect(() => {\r\n        if (activeRepositoryId)\r\n            localStorage.setItem('activeRepository', JSON.stringify(activeRepositoryId))\r\n    }, [activeRepositoryId])\r\n\r\n    useEffect(() => {\r\n        const getContributors = localStorage.getItem('contributors')\r\n        if (getContributors)\r\n            dispatch(\r\n                RepositoriesActions.setContributesOfActiveRepository(\r\n                    JSON.parse(getContributors)\r\n                )\r\n            )\r\n        const getActiveRepositoryId = localStorage.getItem('activeRepository')\r\n        if (getActiveRepositoryId)\r\n            dispatch(\r\n                RepositoriesActions.setActiveRepository(JSON.parse(getActiveRepositoryId))\r\n            )\r\n        const getRepositories = localStorage.getItem('repositories')\r\n        if (getRepositories)\r\n            dispatch(RepositoriesActions.setRepositories(JSON.parse(getRepositories)))\r\n    }, [dispatch])\r\n\r\n    if (!repositoryInfo || !contributors) return <Preloader />\r\n\r\n    const {\r\n        name,\r\n        stargazers_count,\r\n        updated_at,\r\n        owner: { login, avatar_url, html_url },\r\n        language,\r\n        description,\r\n    } = repositoryInfo[0]\r\n    return (\r\n        <RepositoryCard\r\n            repoName={name}\r\n            countStars={stargazers_count}\r\n            dateLastCommit={updated_at}\r\n            avatar={avatar_url}\r\n            nickName={login}\r\n            language={language}\r\n            description={description}\r\n            activeContributes={contributors}\r\n            link={html_url}\r\n        />\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport const NotFound = () => {\r\n    return <div>Page is not Found</div>\r\n}","import React from 'react'\nimport styled from 'styled-components'\nimport { useSelector } from 'react-redux'\nimport { Switch, Route } from 'react-router-dom'\nimport { MainPage } from './Components/Pages/Main'\nimport { ErrorsSelectors } from './Components/Features/Errors/Model'\nimport { Error } from './Components/Features/Errors'\nimport { CardPage } from './Components/Pages/Card'\nimport { NotFound } from './Components/Pages/Not Found'\n\nconst Wrapper = styled.div`\n    width: 100%;\n    max-width: 1200px;\n    margin: 0 auto;\n`\n\nexport const App = (): React.ReactElement => {\n    const error = useSelector(ErrorsSelectors.error)\n\n    return (\n        <Wrapper>\n            {error && <Error />}\n            <Switch>\n                <Route path=\"/\" exact component={() => <MainPage />} />\n                <Route path=\"/:repoID?\" component={() => <CardPage />} />\n                <Route path=\"*\" component={() => <NotFound />} />\n            </Switch>\n        </Wrapper>\n    )\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport { HashRouter } from 'react-router-dom'\nimport * as serviceWorker from './serviceWorker'\nimport { store } from './Components/lib/store/store'\nimport { App } from './App'\nimport './global.sass'\n\nReactDOM.render(\n    <HashRouter>\n        <Provider store={store}>\n            <App />\n        </Provider>\n    </HashRouter>,\n    document.querySelector('#root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}